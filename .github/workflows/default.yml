# This is a basic workflow to help you get started with Actions

name: CI workflow
env:
  ARTIFACT_NAME: 'devops-final-project'

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

      # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Run unit and integration tests
        run: ./gradlew check
  lint:
    name: Lint it
    needs: test-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        #        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_BASH: false
          VALIDATE_DOCKERFILE_HADOLINT: false
          VALIDATE_MARKDOWN: false
  check-for-secrets:
    name: Check for secrets
    needs: test-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Yelp's detect-secrets
        uses: RobertFischer/detect-secrets-action@v2.0.0
      - name: Commit back .secrets.baseline (if it was missing)
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "build(detect-secrets): Commit the newly-generated .secrets.baseline file"
  SCA:
    needs: test-project
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Execute Jacoco Report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube
  SAST:
    needs: test-project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle-jdk11@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: "--severity-threshold=critical --sarif-file-output=snyk.sarif"
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
  docker-image-scan:
    needs: [check-for-secrets, SCA, SAST]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set GitHub Revision
        run: echo PROJECT_SHA="$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      - name: Set Project version
        run: echo PROJECT_VERSION="$(./gradlew properties --no-daemon -q | grep version | awk '{print $2}')" >> $GITHUB_ENV
      - name: Build a Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ARTIFACT_NAME }}-${{ env.PROJECT_VERSION }}:${{ env.PROJECT_SHA }} .
      - name: Security scan on docker image
        uses: snyk/actions/docker@master
        id: docker-image-scan
        continue-on-error: true
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.ARTIFACT_NAME }}-${{ env.PROJECT_VERSION }}:${{ env.PROJECT_SHA }}
          args: --file=Dockerfile
            --severity-threshold=critical
            --sarif-file-output=docker.snyk.sarif
          sarif: false
      - name: Upload sarif file to Github Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: docker.snyk.sarif
      - name: Check docker image scan status
        if: ${{ steps.docker-image-scan.outcome == 'failure' }}
        run: exit 1
#      - name: Publish docker image
#        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
#        run: docker push --all-tags ${{ secrets.DOCKERHUB_USERNAME }}/devops-final-project

